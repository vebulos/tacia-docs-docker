version: '3.8'

services:
  # Backend JavaScript
  backend-js:
    build:
      context: .
      dockerfile: docker/backend-js/Dockerfile
      args:
        ACTIVE_BACKEND: ${ACTIVE_BACKEND}
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    environment:
      NODE_ENV: production
      PORT: ${BACKEND_PORT}
    volumes:
      - content_data:/app/data
    networks:
      - mxc_network
    restart: unless-stopped
    profiles: ["backend-js"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BACKEND_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend Java
  backend-java:
    build:
      context: .
      dockerfile: docker/backend-java/Dockerfile
      args:
        ACTIVE_BACKEND: ${ACTIVE_BACKEND}
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    environment:
      SPRING_PROFILES_ACTIVE: production
      SERVER_PORT: ${BACKEND_PORT}
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics
    volumes:
      - content_data:/app/data
    networks:
      - mxc_network
    restart: unless-stopped
    profiles: ["backend-java"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${BACKEND_PORT}/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/dist/frontend/browser:/usr/share/nginx/html:ro
      - ./docker/nginx/logs:/var/log/nginx
    command: >
      sh -c "rm -f /etc/nginx/conf.d/*.conf && 
             nginx -g 'daemon off; error_log /dev/stderr info;' -c /etc/nginx/nginx.conf"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mxc_network
    # Les dépendances sont gérées via les profils
    profiles: ["backend-js", "backend-java"]

  # Node Exporter for system metrics
  node-exporter-js:
    image: prom/node-exporter:latest
    container_name: node-exporter-js
    command:
      - --path.rootfs=/host
    pid: host
    restart: unless-stopped
    volumes:
      - /:/host:ro,rslave
    networks:
      - mxc_network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 100M
    profiles: ["monitoring"]

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
      - --web.enable-lifecycle
    networks:
      - mxc_network
    restart: unless-stopped
    environment:
      BACKEND_JAVA_PORT: ${BACKEND_JAVA_PORT:-8080}
      BACKEND_JS_PORT: ${BACKEND_JS_PORT:-3000}
    profiles: ["monitoring"]

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    networks:
      - mxc_network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles: ["monitoring"]

networks:
  mxc_network:
    driver: bridge
    enable_ipv6: false
    labels:
      - com.docker.compose.project=mxc

volumes:
  content_data:
    driver: local
    labels:
      - com.docker.compose.project=mxc
  grafana-storage:
    driver: local
    labels:
      - com.docker.compose.project=mxc
  prometheus_data:
    driver: local
    labels:
      - com.docker.compose.project=mxc
